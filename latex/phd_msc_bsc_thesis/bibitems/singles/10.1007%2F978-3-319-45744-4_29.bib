@InProceedings{10.1007/978-3-319-45744-4_29,
author="Veggalam, Spandan
and Rawat, Sanjay
and Haller, Istvan
and Bos, Herbert",
editor="Askoxylakis, Ioannis
and Ioannidis, Sotiris
and Katsikas, Sokratis
and Meadows, Catherine",
title="IFuzzer: An Evolutionary Interpreter Fuzzer Using Genetic Programming",
booktitle="Computer Security -- ESORICS 2016",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="581--601",
abstract="We present an automated evolutionary fuzzing technique to find bugs in JavaScript interpreters. Fuzzing is an automated black box testing technique used for finding security vulnerabilities in the software by providing random data as input. However, in the case of an interpreter, fuzzing is challenging because the inputs are piece of codes that should be syntactically/semantically valid to pass the interpreter's elementary checks. On the other hand, the fuzzed input should also be uncommon enough to trigger exceptional behavior in the interpreter, such as crashes, memory leaks and failing assertions. In our approach, we use evolutionary computing techniques, specifically genetic programming, to guide the fuzzer in generating uncommon input code fragments that may trigger exceptional behavior in the interpreter. We implement a prototype named IFuzzer to evaluate our technique on real-world examples. IFuzzer uses the language grammar to generate valid inputs. We applied IFuzzer first on an older version of the JavaScript interpreter of Mozilla (to allow for a fair comparison to existing work) and found 40 bugs, of which 12 were exploitable. On subsequently targeting the latest builds of the interpreter, IFuzzer found 17 bugs, of which four were security bugs.",
isbn="978-3-319-45744-4"
}

