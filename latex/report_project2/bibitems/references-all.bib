% !XeLaTeX root=_main_.tex


@inproceedings{Hoschele:2016:MIG:2970276.2970321,
	author = {H\"{o}schele, Matthias and Zeller, Andreas},
	title = {Mining input grammars from dynamic taints},
	booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
	series = {ASE 2016},
	year = {2016},
	isbn = {978-1-4503-3845-5},
	location = {Singapore, Singapore},
	pages = {720--725},
	numpages = {6},
	url = {http://doi.acm.org/10.1145/2970276.2970321},
	doi = {10.1145/2970276.2970321},
	acmid = {2970321},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Input formats, context-free grammars, dynamic tainting, fuzzing},
} 


@article{Bastani:2017:SPI:3140587.3062349,
	author = {Bastani, Osbert and Sharma, Rahul and Aiken, Alex and Liang, Percy},
	title = {Synthesizing program input grammars},
	journal = {SIGPLAN Not.},
	issue_date = {June 2017},
	volume = {52},
	number = {6},
	month = jun,
	year = {2017},
	issn = {0362-1340},
	pages = {95--110},
	numpages = {16},
	url = {http://doi.acm.org/10.1145/3140587.3062349},
	doi = {10.1145/3140587.3062349},
	acmid = {3062349},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {fuzzing, grammar synthesis},
} 


@article{Hall:2009:WDM:1656274.1656278,
	author = {Hall, Mark and Frank, Eibe and Holmes, Geoffrey and Pfahringer, Bernhard and Reutemann, Peter and Witten, Ian H.},
	title = {The WEKA data mining moftware: an update},
	journal = {SIGKDD Explor. Newsl.},
	issue_date = {June 2009},
	volume = {11},
	number = {1},
	month = nov,
	year = {2009},
	issn = {1931-0145},
	pages = {10--18},
	numpages = {9},
	url = {http://doi.acm.org/10.1145/1656274.1656278},
	doi = {10.1145/1656274.1656278},
	acmid = {1656278},
	publisher = {ACM},
	address = {New York, NY, USA},
} 



@article{DBLP:journals/corr/GreffSKSS15,
	author    = {Klaus Greff and
	Rupesh Kumar Srivastava and
	Jan Koutn{\'{\i}}k and
	Bas R. Steunebrink and
	J{\"{u}}rgen Schmidhuber},
	title     = {{LSTM:} {a} search space odyssey},
	journal   = {CoRR},
	volume    = {abs/1503.04069},
	year      = {2015},
	url       = {http://arxiv.org/abs/1503.04069},
	archivePrefix = {arXiv},
	eprint    = {1503.04069},
	timestamp = {Wed, 07 Jun 2017 14:42:57 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/GreffSKSS15},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}


@article{JMLR:v15:srivastava14a,
	author  = {Nitish Srivastava and Geoffrey Hinton and Alex Krizhevsky and Ilya Sutskever and Ruslan Salakhutdinov},
	title   = {Dropout: a simple way to prevent neural networks from overfitting},
	journal = {Journal of Machine Learning Research},
	year    = {2014},
	volume  = {15},
	pages   = {1929-1958},
	url     = {http://jmlr.org/papers/v15/srivastava14a.html}
}

@phdthesis{Sautermeister2016,
	author = {Sautermeister, Benjamin},
	booktitle = {Deep learning approaches to predict future frames in videos},
	file = {:C$\backslash$:/Users/Morteza/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sautermeister - 2016 - Deep learning approaches to predict future frames in videos.pdf:pdf},
	mendeley-groups = {Seminar952/ANN},
	pages = {129},
	school = {Technical University of Munich},
	title = {{Deep learning approaches to predict future frames in videos}},
	type = {{M.Sc. Thesis}},
	year = {2016}
}

@phdthesis{mikolov2012statistical,
	added-at = {2014-12-13T11:55:59.000+0100},
	author = {Mikolov, Tom{\'a}{\v{s}}},
	biburl = {https://www.bibsonomy.org/bibtex/2f46e25187c111efc2962e281b1501013/gchrupala},
	interhash = {36c142f56be162c4488bc04cf995fbbd},
	intrahash = {f46e25187c111efc2962e281b1501013},
	keywords = {imported},
	school = {Brno University of Technology},
	timestamp = {2014-12-13T11:56:31.000+0100},
	title = {Statistical language models based on neural networks},
	type = {{Ph.D. Thesis}},
	year = 2012
}


@phdthesis{Luong2016,
	abstract = {关于神经机器翻译的一篇博士论文},
	author = {Luong, Minh Thang},
	file = {:C$\backslash$:/Users/Morteza/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Luong - 2016 - Neural Machine Translation.pdf:pdf},
	mendeley-groups = {NLP},
	number = {December},
	pages = {144},
	school = {Stanford university},
	title = {{Neural machine translation}},
	type = {{Ph.D Thesis}},
	url = {https://github.com/lmthang/thesis},
	year = {2016}
}


@phdthesis{Karpathy2016,
	author = {Karpathy, Andrej},
	file = {:C$\backslash$:/Users/Morteza/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Karpathy - 2016 - Connecting images and natural language.pdf:pdf},
	mendeley-groups = {Seminar952/ANN},
	number = {8},
	school = {Stanford University},
	title = {{Connecting images and natural language}},
	type = {{Ph.D. Thesis}},
	year = {2016}
}


@book{Jurafsky2017,
	author = {Jurafsky, Daniel and Martin, James H.},
	title = {Speech and language processing (3rd ed. draft)},
	note={\url{https://web.stanford.edu/~jurafsky/slp3/}},
	year={2017}
} 


@incollection{NIPS2014_5423,
	title = {Generative adversarial nets},
	author = {Goodfellow, Ian and Pouget-Abadie, Jean and Mirza, Mehdi and Xu, Bing and Warde-Farley, David and Ozair, Sherjil and Courville, Aaron and Bengio, Yoshua},
	booktitle = {Advances in Neural Information Processing Systems 27},
	editor = {Z. Ghahramani and M. Welling and C. Cortes and N. D. Lawrence and K. Q. Weinberger},
	pages = {2672--2680},
	year = {2014},
	publisher = {Curran Associates, Inc.},
	url = {http://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf}
}



@article{DBLP:journals/corr/ElgammalLEM17,
	author    = {Ahmed M. Elgammal and
	Bingchen Liu and
	Mohamed Elhoseiny and
	Marian Mazzone},
	title     = {{CAN:} creative adversarial networks, generating "art" by learning about styles and deviating from style norms},
	journal   = {CoRR},
	volume    = {abs/1706.07068},
	year      = {2017},
	url       = {http://arxiv.org/abs/1706.07068},
	archivePrefix = {arXiv},
	eprint    = {1706.07068},
	timestamp = {Mon, 03 Jul 2017 13:29:02 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/ElgammalLEM17},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}


@incollection{NIPS2014_5346,
	title = {Sequence to sequence learning with neural networks},
	author = {Sutskever, Ilya and Vinyals, Oriol and Le, Quoc V},
	booktitle = {Advances in Neural Information Processing Systems 27},
	editor = {Z. Ghahramani and M. Welling and C. Cortes and N. D. Lawrence and K. Q. Weinberger},
	pages = {3104--3112},
	year = {2014},
	publisher = {Curran Associates, Inc.},
	url = {http://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf}
}


@article{DBLP:journals/corr/ChoMGBSB14,
	author    = {Kyunghyun Cho and
	Bart van Merrienboer and
	{\c{C}}aglar G{\"{u}}l{\c{c}}ehre and
	Fethi Bougares and
	Holger Schwenk and
	Yoshua Bengio},
	title     = {Learning phrase representations using {RNN} encoder-decoder for statistical machine translation},
	journal   = {CoRR},
	volume    = {abs/1406.1078},
	year      = {2014},
	url       = {http://arxiv.org/abs/1406.1078},
	archivePrefix = {arXiv},
	eprint    = {1406.1078},
	timestamp = {Wed, 07 Jun 2017 14:43:08 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/ChoMGBSB14},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}


@article{Godefroid:2012:SWF:2090147.2094081,
	author = {Godefroid, Patrice and Levin, Michael Y. and Molnar, David},
	title = {SAGE: whitebox fuzzing for security testing},
	journal = {Queue},
	issue_date = {January 2012},
	volume = {10},
	number = {1},
	month = jan,
	year = {2012},
	issn = {1542-7730},
	url = {http://doi.acm.org/10.1145/2090147.2094081},
	doi = {10.1145/2090147.2094081},
	acmid = {2094081},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@techreport{Corporation2010,
	abstract = {The purpose of this paper is to illustrate the core concepts of the Microsoft Security Development Lifecycle (SDL) and to discuss the individual security activities that should be performed in order to claim compliance with the SDL process.},
	author = {{Microsoft Corporation}},
	file = {:C$\backslash$:/Users/Morteza/Downloads/Simplified Implementation of the SDL.doc:doc},
	pages = {1--17},
	title = {{Simplified implementation of the SDL}},
	year = {2010}
}


@techreport{Symantec2018,
	abstract = {From the sudden spread of WannaCry and Petya/NotPetya, to the swift growth in coinminers, 2017 provided us with another reminder that digital security threats can come from new and unexpected sources. With each passing year, not only has the sheer volume of threats increased, but the threat landscape has become more diverse, with attackers working harder to discover new avenues of attack and cover their tracks while doing so.},
	author = {Symantec},
	booktitle = {Internet security threat report},
	file = {:C$\backslash$:/Users/Morteza/Downloads/Documents/istr-23-2018-en.pdf:pdf},
	title = {{ISTR internet security threat report}},
	note = {\url{https://www.symantec.com/content/dam/symantec/docs/reports/istr-23-2018-en.pdf}},
	volume = {23},
	year = {2018}
}


@article{DBLP:journals/corr/Lipton15,
	author    = {Zachary Chase Lipton},
	title     = {A critical review of recurrent neural networks for sequence learning},
	journal   = {CoRR},
	volume    = {abs/1506.00019},
	year      = {2015},
	url       = {http://arxiv.org/abs/1506.00019},
	archivePrefix = {arXiv},
	eprint    = {1506.00019},
	timestamp = {Wed, 07 Jun 2017 14:40:13 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/Lipton15},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@book{Goodfellow-et-al-2016,
	title={Deep learning},
	author={Ian Goodfellow and Yoshua Bengio and Aaron Courville},
	publisher={MIT Press},
	note={\url{http://www.deeplearningbook.org}},
	year={2016}
}


@inproceedings{Holler2012,
	author = {Holler, Christian and Herzig, Kim and Zeller, Andreas},
	title = {Fuzzing with Code Fragments},
	booktitle = {Proceedings of the 21st USENIX Conference on Security Symposium},
	series = {Security'12},
	year = {2012},
	location = {Bellevue, WA},
	pages = {38--38},
	numpages = {1},
	url = {http://dl.acm.org/citation.cfm?id=2362793.2362831},
	acmid = {2362831},
	publisher = {USENIX Association},
	address = {Berkeley, CA, USA},
} 




@article{Miller2007,
	abstract = {We present a study of two methods of dynamic application analysis: mutation-based fuzzing and generation-based fuzzing. We quantify the differences of these methods by measuring the amount of executed code required to parse PNG image files. Results indicate that generation-based fuzzing can execute 76{\%} more code when compared to mutation-based methods.},
	author = {Miller, Charlie and Peterson, ZNJ},
	file = {:C$\backslash$:/Users/Morteza/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Miller, Peterson - 2007 - Analysis of mutation and generation-based fuzzing.pdf:pdf},
	journal = {White Paper, Independent Security Evaluators},
	mendeley-groups = {Seminar952/FuzzTesting/Paperes/ISI{\_}Journals},
	pages = {1--7},
	title = {{Analysis of mutation and generation-based fuzzing}},
	year = {2007}
}


@article{Chen2018,
	abstract = {Fuzzing is an effective and widely used technique for finding security bugs and vulnerabilities in software. It inputs irregular test data into a target program to try to trigger a vulnerable condition in the program execution. Since the first random fuzzing system was constructed, fuzzing efficiency has been greatly improved by combination with several useful techniques, including dynamic symbolic execution, coverage guide, grammar representation, scheduling algorithms, dynamic taint analysis, static analysis and machine learning. In this paper, we will systematically review these techniques and their corresponding representative fuzzing systems. By introducing the principles, advantages and disadvantages of these techniques, we hope to provide researchers with a systematic and deeper understanding of fuzzing techniques and provide some references for this field.},
	author = {Chen, Chen and Cui, Baojiang and Ma, Jinxin and Wu, Runpu and Guo, Jianchao and Liu, Wenqian},
	doi = {10.1016/j.cose.2018.02.002},
	file = {:D$\backslash$:/Users/Morteza/OneDrive/Online2/{\_}04{\_}2o/o2{\_}university/Master/semester2{\_}952/Seminar/SeminarSurvey/FuzzTesting/Paperes/ISI{\_}Journals/2018{\_}A systematic review of fuzzing techniques{\_}Final.pdf:pdf},
	issn = {01674048},
	journal = {Computers and Security},
	keywords = {Coverage guide,Dynamic symbolic execution,Fuzzing,Grammar representation,Scheduling algorithms,Software bug,Static analysis,Taint analysis,Vulnerability},
	pages = {118--137},
	publisher = {Elsevier Ltd},
	title = {{A systematic review of fuzzing techniques}},
	url = {https://doi.org/10.1016/j.cose.2018.02.002},
	volume = {75},
	year = {2018}
}


@phdthesis{Bruening:2004:ETC:1087758,
	author = {Bruening, Derek L.},
	title = {Efficient, transparent, and comprehensive runtime code manipulation},
	year = {2004},
	note = {AAI0807735},
	publisher = {Massachusetts Institute of Technology},
	address = {Cambridge, MA, USA},
} 


@article{Luk:2005:PBC:1064978.1065034,
	author = {Luk, Chi-Keung and Cohn, Robert and Muth, Robert and Patil, Harish and Klauser, Artur and Lowney, Geoff and Wallace, Steven and Reddi, Vijay Janapa and Hazelwood, Kim},
	title = {Pin: building customized program analysis tools with dynamic instrumentation},
	journal = {SIGPLAN Not.},
	issue_date = {June 2005},
	volume = {40},
	number = {6},
	month = jun,
	year = {2005},
	issn = {0362-1340},
	pages = {190--200},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/1064978.1065034},
	doi = {10.1145/1064978.1065034},
	acmid = {1065034},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {dynamic compilation, instrumentation, program analysis tools},
} 


@article{Khan2012,
	abstract = {Software testing is the process to uncover requirement, design and coding errors in the program. It is used to identify the correctness, completeness, security and quality of software products against a specification. Software testing is the process used to measure the quality of developed computer software. It exhibits all mistakes, errors and flaws in the developed software. There are many approaches to software testing, but effective testing of complex product is essentially a process of investigation, not merely a matter of creating and following route procedure. It is not possible to find out all the errors in the program. This fundamental problem in testing thus throws an open question, as to what would be the strategy we should adopt for testing. In our paper, we have described and compared the three most prevalent and commonly used software testing techniques for detecting errors, they are: white box testing, black box testing and grey box testing.},
	archivePrefix = {arXiv},
	arxivId = {arXiv:1011.1669v3},
	author = {Khan, Mohd Ehmer and Khan, Farmeena},
	doi = {10.1017/CBO9781107415324.004},
	eprint = {arXiv:1011.1669v3},
	file = {:C$\backslash$:/Users/Morteza/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Khan, Khan - 2012 - A comparative study of white box , black box and grey box testing techniques.pdf:pdf},
	isbn = {9788578110796},
	issn = {1098-6596},
	journal = {International Journal of Advanced Computer Science and Applications},
	keywords = {black box,grey box,white box},
	mendeley-groups = {Seminar952/FuzzTesting/Paperes/ISI{\_}Journals},
	number = {6},
	pages = {12--15},
	pmid = {25246403},
	title = {{A comparative study of white box, black box and grey box testing techniques}},
	volume = {3},
	year = {2012}
}


@article{DBLP:journals/corr/abs-1711-04596,
	author    = {Mohit Rajpal and
	William Blum and
	Rishabh Singh},
	title     = {Not all bytes are equal: neural byte sieve for fuzzing},
	journal   = {CoRR},
	volume    = {abs/1711.04596},
	year      = {2017},
	url       = {http://arxiv.org/abs/1711.04596},
	archivePrefix = {arXiv},
	eprint    = {1711.04596},
	timestamp = {Fri, 01 Dec 2017 14:22:24 +0100},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1711-04596},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}


@article{Mcnally2012,
	author = {Mcnally, Richard and Yiu, Ken and Grove, Duncan},
	file = {:C$\backslash$:/Users/Morteza/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mcnally, Yiu, Grove - 2012 - Fuzzing the state of the art.pdf:pdf},
	journal = {DSTO Defence Science and Technology Organisation},
	mendeley-groups = {Seminar952/FuzzTesting/Paperes/ISI{\_}Journals},
	pages = {55},
	title = {{Fuzzing: the state of the art}},
	year = {2012}
}


@book{Rathaus:2007:OSF:1536880,
	author = {Rathaus, Noam and Evron, Gadi},
	title = {Open source fuzzing tools},
	year = {2007},
	isbn = {9780080555614, 9781597491952},
	publisher = {Syngress Publishing},
} 

@book{PaulC.Jorgensen2014,
	abstract = {This updated and reorganized fourth edition of Software Testing: A Craftsman's Approachapplies the strong mathematics content of previous editions to a coherent treatment of Model-Based Testing for both code-based (structural) and specification-based (functional) testing. These techniques are extended from the usual unit testing discussions to full coverage of less understood levels integration and system testing. The Fourth Edition: * Emphasizes technical inspections and is supplemented by an appendix with a full package of documents required for a sample Use Case technical inspection * Introduces an innovative approach that merges the Event-Driven Petri Nets from the earlier editions with the "Swim Lane" concept from the Unified Modeling Language (UML) that permits model-based testing for four levels of interaction among constituents in a System of Systems * Introduces model-based development and provides an explanation of how to conduct testing within model-based development environments * Presents a new section on methods for testing software in an Agile programming environment * Explores test-driven development, reexamines all-pairs testing, and explains the four contexts of software testing Thoroughly revised and updated, Software Testing: A Craftsman's Approach, Fourth Edition is sure to become a standard reference for those who need to stay up to date with evolving technologies in software testing. Carrying on the tradition of previous editions, it will continue to serve as a valuable reference for software testers, developers, and engineers.},
	author = {{Paul C. Jorgensen}},
	booktitle = {Guest Editors Introduction, IEEE Computer},
	doi = {10.1109/TEST.1991.519785},
	edition = {Fourth Edi},
	file = {:C$\backslash$:/Users/Morteza/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Paul C. Jorgensen - 2014 - Software Testing A Craftsman's Approach.pdf:pdf},
	isbn = {9781466560697},
	issn = {1089-3539},
	mendeley-groups = {Seminar952/SoftwareTesting/Books},
	number = {(2)},
	pages = {21--22},
	publisher = {CRC Press Taylor {\&} Francis Group},
	title = {{Software testing a craftsman's approach}},
	volume = {47},
	year = {2014}
}


@book{Dubrova:2013:FD:2462571,
	author = {Dubrova, Elena},
	title = {Fault-tolerant design},
	year = {2013},
	isbn = {1461421128, 9781461421122},
	publisher = {Springer Publishing Company, Incorporated},
} 


@book{ammann2016introduction,
	title={Introduction to software testing},
	author={Ammann, P. and Offutt, J.},
	isbn={9781316773123},
	url={https://books.google.com/books?id=58LeDQAAQBAJ},
	year={2016},
	publisher={Cambridge University Press}
}


@inproceedings{Miller:2006:ESR:1145735.1145743,
	author = {Miller, Barton P. and Cooksey, Gregory and Moore, Fredrick},
	title = {An empirical study of the robustness of {MacOS} applications using random testing},
	booktitle = {Proceedings of the 1st International Workshop on Random Testing},
	series = {RT '06},
	year = {2006},
	isbn = {1-59593-457-X},
	location = {Portland, Maine},
	pages = {46--54},
	numpages = {9},
	url = {http://doi.acm.org/10.1145/1145735.1145743},
	doi = {10.1145/1145735.1145743},
	acmid = {1145743},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {fuzz, random testing},
} 


@inproceedings{Forrester:2000:ESR:1267102.1267108,
	author = {Forrester, Justin E. and Miller, Barton P.},
	title = {An empirical study of the robustness of {Windows NT} applications using random testing},
	booktitle = {Proceedings of the 4th Conference on USENIX Windows Systems Symposium - Volume 4},
	series = {WSS'00},
	year = {2000},
	location = {Seattle, Washington},
	pages = {6--6},
	numpages = {1},
	url = {http://dl.acm.org/citation.cfm?id=1267102.1267108},
	acmid = {1267108},
	publisher = {USENIX Association},
	address = {Berkeley, CA, USA},
} 


@TECHREPORT{Miller1995,
	author = {Barton P. Miller and David Koski and Cjin Pheow and Lee Vivekananda Maganty and Ravi Murthy and Ajitkumar Natarajan and Jeff Steidl},
	title = {{Fuzz revisited: a re-examination of the reliability of Unix utilities and services}},
	institution = {University of Wisconsin-Madison},
	year = {1995}
}

@article{Miller:1990:ESR:96267.96279,
	author = {Miller, Barton P. and Fredriksen, Louis and So, Bryan},
	title = {An empirical study of the reliability of {Unix} utilities},
	journal = {Commun. ACM},
	issue_date = {Dec. 1990},
	volume = {33},
	number = {12},
	month = dec,
	year = {1990},
	issn = {0001-0782},
	pages = {32--44},
	numpages = {13},
	url = {http://doi.acm.org/10.1145/96267.96279},
	doi = {10.1145/96267.96279},
	acmid = {96279},
	publisher = {ACM},
	address = {New York, NY, USA},
}


@InProceedings{10.1007/978-3-319-45744-4_29,
	author="Veggalam, Spandan
	and Rawat, Sanjay
	and Haller, Istvan
	and Bos, Herbert",
	editor="Askoxylakis, Ioannis
	and Ioannidis, Sotiris
	and Katsikas, Sokratis
	and Meadows, Catherine",
	title={IFuzzer: an evolutionary interpreter fuzzer using genetic programming},
	booktitle="Computer Security -- ESORICS 2016",
	year="2016",
	publisher="Springer International Publishing",
	address="Cham",
	pages="581--601",
	abstract="We present an automated evolutionary fuzzing technique to find bugs in JavaScript interpreters. Fuzzing is an automated black box testing technique used for finding security vulnerabilities in the software by providing random data as input. However, in the case of an interpreter, fuzzing is challenging because the inputs are piece of codes that should be syntactically/semantically valid to pass the interpreter's elementary checks. On the other hand, the fuzzed input should also be uncommon enough to trigger exceptional behavior in the interpreter, such as crashes, memory leaks and failing assertions. In our approach, we use evolutionary computing techniques, specifically genetic programming, to guide the fuzzer in generating uncommon input code fragments that may trigger exceptional behavior in the interpreter. We implement a prototype named IFuzzer to evaluate our technique on real-world examples. IFuzzer uses the language grammar to generate valid inputs. We applied IFuzzer first on an older version of the JavaScript interpreter of Mozilla (to allow for a fair comparison to existing work) and found 40 bugs, of which 12 were exploitable. On subsequently targeting the latest builds of the interpreter, IFuzzer found 17 bugs, of which four were security bugs.",
	isbn="978-3-319-45744-4"
}


@inproceedings{Kargen:2015:TPA:2786805.2786844,
	author = {Karg{\'e}n, Ulf and Shahmehri, Nahid},
	title = {Turning programs against each other: high coverage fuzz-testing using binary-code mutation and dynamic slicing},
	booktitle = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
	series = {ESEC/FSE 2015},
	year = {2015},
	isbn = {978-1-4503-3675-8},
	location = {Bergamo, Italy},
	pages = {782--792},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/2786805.2786844},
	doi = {10.1145/2786805.2786844},
	acmid = {2786844},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Fuzz testing, black-box, dynamic slicing, fuzzing, program mutation},
}


@phdthesis{Kettunen2014,
	abstract = {Modern web browsers are feature rich software applications available for different platforms ranging from home computers to mobile phones and modern TVs. Because of this variety, the security testing of web browsers is a diverse field of research. Typical publicly available tools for browser security testing are fuzz test case generators designed to target a single feature of a browser on a single platform. This work introduces a cross-platform testing harness for browser fuzz testing, called NodeFuzz. In the design of NodeFuzz, test case generators and instrumentation are separated from the core into separate modules. This allows the user to implement feature specific test case generators and platform specific instrumentations, and to execute those in different combinations. During development, NodeFuzz was tested with ten different test case generators and six different instrumentation modules. Over 50 vulnerabilities were uncovered from the tested web browsers during the development and testing of NodeFuzz.},
	author = {Kettunen, Atte},
	file = {:C$\backslash$:/Users/Morteza/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kettunen - 2014 - Test harness for web browser fuzz testing.pdf:pdf},
	keywords = {Security testing,automated software testing,robustness testing.,testing harness,vulnerability finding},
	mendeley-groups = {Seminar952/FuzzTesting/Thesis},
	number = {September},
	pages = {45},
	school = {University of Oulu},
	title = {{Test harness for web browser fuzz testing}},
	type = {{M.Sc. Thesis}},
	year = {2014}
}


@inproceedings{Rawat2017VUzzerAE,
	title={VUzzer: application-aware evolutionary fuzzing},
	author={Sanjay Rawat and Vivek Jain and Ashish Kumar and Lucian Cojocar and Cristiano Giuffrida and Herbert Bos},
	booktitle={Proceedings of the Network and Distributed System Security Symposium (NDSS)},
	month = feb,
	year = {2017},
	keywords = {class\_testing, proj\_sharcs, type\_ast, type\_conf, type\_top}
}


@book{Takanen:2008:FSS:1404500,
	author = {Takanen, Ari and DeMott, Jared and Miller, Charlie},
	title = {Fuzzing for software security testing and quality assurance},
	year = {2008},
	isbn = {1596932147, 9781596932142},
	edition = {1},
	publisher = {Artech House, Inc.},
	address = {Norwood, MA, USA},
} 


@book{Sutton:2007:FBF:1324770,
	author = {Sutton, Michael and Greene, Adam and Amini, Pedram},
	title = {Fuzzing: brute force vulnerability discovery},
	year = {2007},
	isbn = {0321446119},
	publisher = {Addison-Wesley Professional},
}


@inproceedings{Godefroid:2017:LML:3155562.3155573,
	author = {Godefroid, Patrice and Peleg, Hila and Singh, Rishabh},
	title = {Learn{\&}Fuzz: machine learning for input fuzzing},
	booktitle = {Proceedings of the 32Nd IEEE/ACM International Conference on Automated Software Engineering},
	series = {ASE 2017},
	year = {2017},
	isbn = {978-1-5386-2684-9},
	location = {Urbana-Champaign, IL, USA},
	pages = {50--59},
	numpages = {10},
	url = {http://dl.acm.org/citation.cfm?id=3155562.3155573},
	acmid = {3155573},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA},
	keywords = {deep learning, fuzzing, grammar learning, grammar-based fuzzing},
}


@article{DBLP:journals/corr/KingmaB14,
	author    = {Diederik P. Kingma and
	Jimmy Ba},
	title     = {Adam: {a} method for stochastic optimization},
	journal   = {CoRR},
	volume    = {abs/1412.6980},
	year      = {2014},
	url       = {http://arxiv.org/abs/1412.6980},
	archivePrefix = {arXiv},
	eprint    = {1412.6980},
	timestamp = {Wed, 07 Jun 2017 14:40:52 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/KingmaB14},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}


@article{DBLP:journals/corr/AbadiABBCCCDDDG16,
	author    = {Mart{\'{\i}}n Abadi and
	Ashish Agarwal and
	Paul Barham and
	Eugene Brevdo and
	Zhifeng Chen and
	Craig Citro and
	Gregory S. Corrado and
	Andy Davis and
	Jeffrey Dean and
	Matthieu Devin and
	Sanjay Ghemawat and
	Ian J. Goodfellow and
	Andrew Harp and
	Geoffrey Irving and
	Michael Isard and
	Yangqing Jia and
	Rafal J{\'{o}}zefowicz and
	Lukasz Kaiser and
	Manjunath Kudlur and
	Josh Levenberg and
	Dan Man{\'{e}} and
	Rajat Monga and
	Sherry Moore and
	Derek Gordon Murray and
	Chris Olah and
	Mike Schuster and
	Jonathon Shlens and
	Benoit Steiner and
	Ilya Sutskever and
	Kunal Talwar and
	Paul A. Tucker and
	Vincent Vanhoucke and
	Vijay Vasudevan and
	Fernanda B. Vi{\'{e}}gas and
	Oriol Vinyals and
	Pete Warden and
	Martin Wattenberg and
	Martin Wicke and
	Yuan Yu and
	Xiaoqiang Zheng},
	title     = {TensorFlow: large-scale machine learning on heterogeneous distributed systems},
	journal   = {CoRR},
	volume    = {abs/1603.04467},
	year      = {2016},
	url       = {http://arxiv.org/abs/1603.04467},
	archivePrefix = {arXiv},
	eprint    = {1603.04467},
	timestamp = {Wed, 07 Jun 2017 14:40:20 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/AbadiABBCCCDDDG16},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%          Web Pages         %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@misc{chollet2015keras,
	title={Keras},
	author={Chollet, Fran\c{c}ois and others},
	year={2015},
	howpublished={\url{https://keras.io}},
}

@misc{InternetSecurityGlossary,
	author={{Network Working Group}},
	title = {{Internet security glossary}},
	HOWPUBLISHED = {\url{https://tools.ietf.org/html/rfc2828}},
	urldate = {2017-10-11},
	year = {[Accessed: 2017-10-11]}
}


@misc{ApplicationVerifier,
	author = {{Microsoft}},
	title = {{Application verifier (appverif.exe)}},
	HOWPUBLISHED = {[Online]. Available: \url{https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/application-verifier}},
	urldate = {2018-07-18},
	year = {[Accessed: 2018-07-18]}
}

@misc{Zalewsky2013,
	author = {Zalewsky, Michal},
	title = {{American fuzzy lop}},
	HOWPUBLISHED = {[Online]. Available: \url{http://lcamtuf.coredump.cx/afl/}},
	urldate = {2017-10-11},
	year = {[Accessed: 2017-10-11]}
}

@misc{QEMU2018,
	author = {{QEMU Team}},
	title = {{QEMU}},
	HOWPUBLISHED = {[Online]. Available: \url{https://www.qemu.org/}},
	urldate = {2018-07-27},
	YEAR = {[Accessed: 2018-07-27]}
}

@misc{MuPDF2018,
	author = {{Artifex Software, Inc.}},
	title = {{MuPDF}},
	HOWPUBLISHED = {[Online]. Available: \url{https://mupdf.com/}},
	urldate = {2018-07-25},
	YEAR = {[Accessed: 2018-07-25]}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%        Reverse Lab         %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@Article{Nikravan2018,
	author="Nikravan, Esmaeel
	and Parsa, Saeed",
	title="A reasoning-based approach to dynamic domain reduction in test data generation",
	journal="International Journal on Software Tools for Technology Transfer",
	year="2018",
	month="May",
	day="08",
	abstract="In this article, a new criterion, domain coverage, for white box testing is introduced. In search of the biggest subdomains for input variables exercising a given path, the variable domains are broken down into overlapping subregions in such a way that the resultant subregions either exercise or deviate from the path. To this aim, an incremental method is applied to detect the subregions, covering the longest subpaths from the start of the given path. The detected subdomain is further subdivided, and this process is repeated as far as the path is fully covered. If no subdomain is detected, the method is backtracked. The backtrack begins with the subdomain covering the longest subpath at the beginning of the given path, but this time the subdomain is divided into relatively smaller subregions, compared with the last time. A directed acyclic graph representation of each input variable domain is used to ignore re-examination of those subdomains which deviate from the path. Conducted experiments reveal that our proposed domain-oriented algorithm outperforms the existing path-oriented test data generation algorithms.",
	issn="1433-2787",
	doi="10.1007/s10009-018-0493-6",
	url="https://doi.org/10.1007/s10009-018-0493-6"
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%     Persian References     %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@PHDTHESIS{ZakeriSeminar2017,
  AUTHOR =       {م. ذاکری نصرابادی},
  TITLE =        {بررسی روش‌های تولید خودکار داده‌های آزمون برای استفاده در فازرهای مبتنی بر قالب فایل},
  TYPE = {سمینار کارشناسی ارشد},
  SCHOOL =       {دانشکده کامپیوتر، دانشگاه علم و صنعت ایران},
  YEAR =         {1396},
  MONTH =        {آبان},
  OPTpagetotal = {115},
  LANGUAGE =     {Persian}
}

@PHDTHESIS{amini1395,
	AUTHOR = {س. امینی},
	TITLE = {طراحی و پیاده‌سازی یک روش تولید داده آزمون به‌منظور کشف آسیب‌پذیری‌های نرم‌افزار},
	TYPE = {پایان‌نامه کارشناسی ارشد},
	SCHOOL = {دانشکده مهندسی کامپیوتر، دانشگاه علم و صنعت ایران},
	YEAR = {1395},
	MONTH = {آبان},
	OPTpagetotal = {104},
	language = {Persian}
}

@PHDTHESIS{yaghoubi1392,
	AUTHOR = {س.م. یعقوبی},
	TITLE = {طراحی و پياده‌سازی فازر با هدف تعيين آسيب‌پذيری‌های مرورگر وب},
	TYPE = {پایان‌نامه کارشناسی ارشد},
	SCHOOL = {دانشکده مهندسی کامپیوتر، دانشگاه علم و صنعت ایران},
	YEAR = {1392},
	MONTH = {آبان},
	OPTpagetotal = {79},
	LANGUAGE = {Persian}
}
